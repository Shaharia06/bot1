import subprocess
import sys

# ЁЯФз рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржирж╕рзНржЯрж▓рж╛рж░
def install_package(package):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", package])
    except subprocess.CalledProcessError:
        print(f"тЭМ {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ!")

# ЁЯУж ржжрж░ржХрж╛рж░рж┐ ржкрзНржпрж╛ржХрзЗржЬ
required_packages = [
    "python-telegram-bot==22.1"
]

# ЁЯФБ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓рзЗрж╢ржи ржЪрзЗржХ
for package in required_packages:
    try:
        __import__(package.split("==")[0])
    except ImportError:
        print(f"ЁЯУж {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        install_package(package)

# тЬЕ рж╕ржм ржЗржорзНржкрзЛрж░рзНржЯ
import re
from telegram import Update, ChatMemberUpdated
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ChatMemberHandler
)

# ЁЯФР ржмржЯ ржЯрзЛржХрзЗржи ржУ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐
BOT_TOKEN = "7375483284:AAGqPYBkEHfZumXVN_1KT7-HwlTQT-e8FhM"
ADMIN_ID = 7949308405

# ЁЯФа Markdown Escape
def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

# ЁЯСотАНтЩВя╕П ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзЗржХ
async def is_admin(update: Update):
    return update.effective_user.id == ADMIN_ID

# ЁЯУМ /info ржХржорж╛ржирзНржб
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛржорж╛рж░ ржмрж╛ржкрзЗрж░ ЁЯЩВ ? ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("тЪая╕П ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬрзЗ reply ржжрж┐рзЯрзЗ `/info` рж▓рж┐ржЦрзЛред")
        return

    user = update.message.reply_to_message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_id = user.id
    username = f"@{escape_markdown(user.username)}" if user.username else "No username"

    photos = await context.bot.get_user_profile_photos(user.id)
    if photos.total_count > 0:
        photo_file = photos.photos[0][-1].file_id
        await update.message.reply_photo(
            photo=photo_file,
            caption=(
                f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
                f"ЁЯЖФ *User ID:* `{user_id}`\n"
                f"ЁЯФЧ *Username:* {username}"
            ),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.message.reply_text(
            f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
            f"ЁЯЖФ *User ID:* `{user_id}`\n"
            f"ЁЯФЧ *Username:* {username}",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# ЁЯУЭ /report ржХржорж╛ржирзНржб
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "тЭМ рж░рж┐ржкрзЛрж░рзНржЯрзЗрж░ ржЯрзЗржХрзНрж╕ржЯ рж▓рж┐ржЦрзЛ, ржпрзЗржоржи:\nржЙржжрж╛рж╣рж░ржгржГ /report <рждрзЛржорж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯ>"
        )
        return

    report_text = ' '.join(context.args)
    user = update.effective_user
    msg = (
        f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\n"
        f"ЁЯСд Reporter: {user.mention_html()}\n"
        f"ЁЯУЭ рж░рж┐ржкрзЛрж░рзНржЯ: {report_text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode=ParseMode.HTML)
    await update.message.reply_text("тЬЕ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред")

# ЁЯОЙ ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржПрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = member.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {name}! ржЧрзНрж░рзБржкрзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржПржЦрж╛ржирзЗ рж╕ржмрж╛ржЗ ржмржирзНржзрзБ, ржоржЬрж╛ ржХрж░рзЛ ржЧрзНрж░рзБржк рж░рзБрж▓рж╕ ржорзЗржирзЗ ржЪрж▓рзЛ! ЁЯШК"
        )

# ЁЯСЛ ржорзЗржорзНржмрж╛рж░ ржмрзЗрж░ рж╣рж▓рзЗ ржмрж┐ржжрж╛рзЯ
async def left(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.left_chat_member
    if user:
        name = user.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ {name}! ржЖрж╢рж╛ ржХрж░рж┐ ржЖржмрж╛рж░ ржЖрж╕ржмрзЗред"
        )

# ЁЯПБ ржмржЯ ржЪрж╛рж▓рзБ
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    # тЬЕ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report", report))

    # ЁЯСе ржорзЗржорзНржмрж╛рж░ ржПржирзНржЯрзНрж░рж┐ ржУ ржПржХрзНрж╕рж┐ржЯ
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, left))

    print("тЬЕ Bot is running... /info (admin only), /report, Welcome and Left message active")
    app.run_polling()
