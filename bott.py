import subprocess
import sys

# ржпржжрж┐ module ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЕржЯрзЛ ржЗржирж╕рзНржЯрж▓ ржХрж░ржмрзЗ
try:
    from telegram import Update, ChatMemberUpdated
    from telegram.ext import (
        Application, CommandHandler, ContextTypes,
        ChatMemberHandler
    )
except ImportError:
    print("ЁЯУж python-telegram-bot ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "python-telegram-bot"])
    from telegram import Update, ChatMemberUpdated
    from telegram.ext import (
        Application, CommandHandler, ContextTypes,
        ChatMemberHandler
    )

import re

BOT_TOKEN = "8135386559:AAGKbt0LjPupSmYQQ-f5_FM2JzakFuxNkAM"
ADMIN_ID = 6919881622  # рж╢рзБржзрзБ ржПржЗ ржЖржЗржбрж┐ info ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░ржмрзЗ

def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

async def is_admin(update: Update):
    return update.effective_user.id == ADMIN_ID

# тЬЕ /info command
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛржорж╛рж░ ржмрж╛ржкрзЗрж░ ЁЯЩВ ? ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("тЪая╕П ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬрзЗ reply ржжрж┐рзЯрзЗ /info рж▓рж┐ржЦрзЛред")
        return 

    user = update.message.reply_to_message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_id = user.id
    username = f"@{escape_markdown(user.username)}" if user.username else "No username"

    photos = await context.bot.get_user_profile_photos(user.id)
    if photos.total_count > 0:
        photo_file = photos.photos[0][-1].file_id
        await update.message.reply_photo(
            photo=photo_file,
            caption=(
                f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
                f"ЁЯЖФ *User ID:* {user_id}\n"
                f"ЁЯФЧ *Username:* {username}"
            ),
            parse_mode="MarkdownV2"
        )
    else:
        await update.message.reply_text(
            f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
            f"ЁЯЖФ *User ID:* {user_id}\n"
            f"ЁЯФЧ *Username:* {username}",
            parse_mode="MarkdownV2"
        )

# тЬЕ /report command
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("тЭМ рж░рж┐ржкрзЛрж░рзНржЯрзЗрж░ ржЯрзЗржХрзНрж╕ржЯ рж▓рж┐ржЦрзЛ, ржпрзЗржоржи:\nржЙржжрж╛рж╣рж░ржгржГ /report <рждрзЛржорж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯ>")
        return

    report_text = ' '.join(context.args)
    user = update.effective_user
    msg = (
        f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\n"
        f"ЁЯСд Reporter: {user.mention_html()}\n"
        f"ЁЯУЭ рж░рж┐ржкрзЛрж░рзНржЯ: {report_text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="HTML")
    await update.message.reply_text("тЬЕ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред")

# тЬЕ ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржПрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо
async def welcome_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member.new_chat_member
    if member.status == "member":
        user = member.user
        full_name = user.full_name
        await context.bot.send_message(
            chat_id=update.chat_member.chat.id,
            text=f"ЁЯМЯ рж╕рзНржмрж╛ржЧрждржо {full_name}!\nржЖрж╢рж╛ ржХрж░рж┐ рждрзБржорж┐ ржнрж╛рж▓рзЛ рж╕ржорзЯ ржХрж╛ржЯрж╛ржмрзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ тЭдя╕П"
        )

# тЬЕ ржХрзЗржЙ рж▓рж┐ржн ржХрж░рж▓рзЗ ржмрж┐ржжрж╛рзЯ
async def farewell_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member
    if member.old_chat_member.status == "member" and member.new_chat_member.status in ("left", "kicked"):
        user = member.new_chat_member.user
        await context.bot.send_message(
            chat_id=update.chat_member.chat.id,
            text=f"ЁЯСЛ ржмрж┐ржжрж╛рзЯ {user.full_name}, ржжрзЗржЦрж╛ рж╣ржмрзЗ ржЕржирзНржп ржжрж┐ржи ЁЯе▓"
        )

# тЬЕ Main runner
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(ChatMemberHandler(welcome_member, ChatMemberHandler.CHAT_MEMBER))
    app.add_handler(ChatMemberHandler(farewell_member, ChatMemberHandler.CHAT_MEMBER))

    print("тЬЕ Bot is running... /info, /report, welcome & leave active")
    app.run_polling()
