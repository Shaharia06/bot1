import subprocess
import sys

# ЁЯФз рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржирж╕рзНржЯрж▓рж╛рж░
def install_package(package):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", package])
    except subprocess.CalledProcessError:
        print(f"тЭМ {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ!")

# ЁЯУж ржжрж░ржХрж╛рж░рж┐ ржкрзНржпрж╛ржХрзЗржЬ
required_packages = [
    "python-telegram-bot==22.1"
]

for package in required_packages:
    try:
        __import__(package.split("==")[0])
    except ImportError:
        print(f"ЁЯУж {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        install_package(package)

# тЬЕ рж╕ржм ржЗржорзНржкрзЛрж░рзНржЯ
import re
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ЁЯФР ржмржЯ ржЯрзЛржХрзЗржи ржУ ржПржХрж╛ржзрж┐ржХ ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐
BOT_TOKEN = "7375483284:AAGqPYBkEHfZumXVN_1KT7-HwlTQT-e8FhM"
ADMIN_IDS = [7949308405, 6919881622, 1087968824]  # ржПржХрж╛ржзрж┐ржХ ржЕрзНржпрж╛ржбржорж┐ржи

# ЁЯСотАНтЩВя╕П ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзЗржХ
async def is_admin(update: Update):
    return update.effective_user.id in ADMIN_IDS

# ЁЯУМ /info ржХржорж╛ржирзНржб
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("<b>тЫФ ржмрж╛ржкржЬрж╛ржи ржмржЯ ржХрж┐ рждрзЛржорж╛рж░ ржмрж╛ржкрзЗрж░ЁЯШРЁЯди? ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!ЁЯл░</b>", parse_mode=ParseMode.HTML)
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("<b>тЪая╕П ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬрзЗ reply ржжрж┐рзЯрзЗ /info рж▓рж┐ржЦрзЛред</b>", parse_mode=ParseMode.HTML)
        return

    user = update.message.reply_to_message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_id = user.id
    username = f"@{user.username}" if user.username else "No username"

    photos = await context.bot.get_user_profile_photos(user.id)
    if photos.total_count > 0:
        photo_file = photos.photos[0][-1].file_id
        await update.message.reply_photo(
            photo=photo_file,
            caption=(
                f"<b>ЁЯСд Full Name:</b> <b>{full_name}</b>\n"
                f"<b>ЁЯЖФ User ID:</b> <code>{user_id}</code>\n"
                f"<b>ЁЯФЧ Username:</b> <b>{username}</b>"
            ),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            f"<b>ЁЯСд Full Name:</b> <b>{full_name}</b>\n"
            f"<b>ЁЯЖФ User ID:</b> <code>{user_id}</code>\n"
            f"<b>ЁЯФЧ Username:</b> <b>{username}</b>",
            parse_mode=ParseMode.HTML
        )

# ЁЯУЭ /report ржХржорж╛ржирзНржб (рж╕ржмрж╛рж░ ржЗржиржмржХрзНрж╕рзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржмрзЗ)
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("<b>тЭМ рж░рж┐ржкрзЛрж░рзНржЯ рж▓рж┐ржЦрзЛ! ржпрзЗржоржиржГ\n/report ржХрзЗржЙ ржмрж╛ржЬрзЗ ржХржерж╛ ржмрж▓ржЫрзЗ</b>", parse_mode=ParseMode.HTML)
        return

    report_text = ' '.join(context.args)
    user = update.effective_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    username = f"@{user.username}" if user.username else "No username"
    user_id = user.id

    msg = (
        f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\n"
        f"ЁЯСд Reporter Info:\n"
        f"тАв Name: {full_name}\n"
        f"тАв Username: {username}\n"
        f"тАв Chat ID: <code>{user_id}</code>\n\n"
        f"ЁЯУЭ рж░рж┐ржкрзЛрж░рзНржЯ: {report_text}"
    )

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=msg, parse_mode=ParseMode.HTML)
        except Exception as e:
            print(f"тЭМ ржЕрзНржпрж╛ржбржорж┐ржи {admin_id} ржХрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

    await update.message.reply_text("<b>тЬЕ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред</b>", parse_mode=ParseMode.HTML)

# ЁЯУЬ /rules ржХржорж╛ржирзНржб (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржп)
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("<b>тЫФ ржмрж╛ржкржЬрж╛ржи ржмржЯ ржХрж┐ рждрзЛржорж╛рж░ ржмрж╛ржкрзЗрж░ЁЯШРЁЯди? ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!ЁЯл░</b>", parse_mode=ParseMode.HTML)
        return

    rules_text = (
        "<b>ЁЯУв ржЧрзНрж░рзБржкрзЗрж░ ржирж┐рзЯржорж╛ржмрж▓рзА:</b>\n\n"
        "1я╕ПтГг<b> ржЕрж╕ржнрзНржп ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред</b>тЭМ\n"
        "2я╕ПтГг<b> ржмрзНржпржХрзНрждрж┐ржЧржд ржЖржХрзНрж░ржоржг ржирж┐рж╖рж┐ржжрзНржзред</b>тЭМ\n"
        "3я╕ПтГг<b> рж╕рзНржкрзНржпрж╛ржо ржмрж╛ ржЕржмрж╛ржЮрзНржЫрж┐ржд рж▓рж┐ржЩрзНржХ рж╢рзЗрзЯрж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред</b>тЭМ\n"
        "4я╕ПтГг<b> рж╕ржХрж▓ рж╕ржжрж╕рзНржпржХрзЗ рж╕ржорзНржорж╛ржи ржХрж░рждрзЗ рж╣ржмрзЗред</b>тЬЕ\n"
        "5я╕ПтГг<b> ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ ржорзЗржирзЗ ржЪрж▓рждрзЗ рж╣ржмрзЗред</b>тЬЕ\n\n"
        "<b>ржзржирзНржпржмрж╛ржж рж╕ржмрж╛ржЗржХрзЗ рж╢рж╛ржирзНрждрж┐ржкрзВрж░рзНржг ржУ ржоржЬрж╛рж░ ржЧрзНрж░рзБржк ржкрж░рж┐ржмрзЗрж╢ ржмржЬрж╛рзЯ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред</b>ЁЯл╢ЁЯТР"
    )
    await update.message.reply_text(rules_text, parse_mode=ParseMode.HTML)

# ЁЯЖШ /help ржХржорж╛ржирзНржб (рж╕ржмрж╛рж░ ржЬржирзНржп)
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>@TEAM_BCCBOT ржП BOT ржЧрж┐рзЯрзЗ ржпрзЗржХрж╛рж░рзЛ ржмрж┐рж╖рзЯрзЗ ржЧрзЛржкржирзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред</b>\n\n"
        "<b>ржпрзЗржнрж╛ржмрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░ржмрзЗржи:</b>\n"
        "\n"
        "<b>ржЙржжрж╛рж╣рж░ржгржГ</b> <code> /report &lt;ржЖржкржирж╛рж░ ржЙржХрзНржд ржЕржнрж┐ржпрзЛржЧржЯрж┐ рж▓рж┐ржЦрзБржи&gt; </code>\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# ЁЯОЙ ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржПрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = member.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(f"<b>ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {name}! ржЧрзНрж░рзБржкрзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржоржЬрж╛ ржХрж░рзЛ, ржирж┐рзЯржо ржорж╛ржирзЛ ЁЯШКЁЯТР</b>", parse_mode=ParseMode.HTML)

# ЁЯСЛ ржорзЗржорзНржмрж╛рж░ ржмрзЗрж░ рж╣рж▓рзЗ ржмрж┐ржжрж╛рзЯ
async def left(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.left_chat_member
    if user:
        name = user.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(f"<b>ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ {name}! ржЖрж╢рж╛ ржХрж░рж┐ ржЖржмрж╛рж░ ржжрзЗржЦрж╛ рж╣ржмрзЗ!ЁЯл╢</b>", parse_mode=ParseMode.HTML)

# тЦ╢я╕П ржмржЯ ржЪрж╛рж▓рзБ
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, left))

    print("тЬЕ Bot is running with multi-admin /report, /info, /rules and /help support")
    app.run_polling()
