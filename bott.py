import subprocess
import sys
import random
import html  # <-- ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рзЛ ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯ ржПрж╕рзНржХрзЗржкрзЗрж░ ржЬржирзНржп

# рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржирж╕рзНржЯрж▓рж╛рж░
def install_package(package):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", package])
    except subprocess.CalledProcessError:
        print(f"тЭМ {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ!")

required_packages = [
    "python-telegram-bot==22.1"
]

for package in required_packages:
    try:
        __import__(package.split("==")[0])
    except ImportError:
        print(f"ЁЯУж {package} ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        install_package(package)

# рж╕ржм ржЗржорзНржкрзЛрж░рзНржЯ
import re
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

BOT_TOKEN = "7375483284:AAGqPYBkEHfZumXVN_1KT7-HwlTQT-e8FhM"
ADMIN_IDS = [7949308405, 1087968824]

async def is_admin(update: Update):
    return update.effective_user.id in ADMIN_IDS

# /info ржХржорж╛ржирзНржб
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text(
            "<b>тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛрж░ ржмрж╛ржкрзЗрж░ ?ЁЯЩВЁЯШСЁЯШРЁЯди рж╣рзБржжрж╛ржЗ ржХржорж╛ржирзНржб ржЯрзЗржкрзЗ ЁЯШСЁЯЩД</b>",
            parse_mode=ParseMode.HTML
        )
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(
            "<b>тЪая╕П ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬрзЗ reply ржжрж┐рзЯрзЗ /info рж▓рж┐ржЦрзЛред</b>",
            parse_mode=ParseMode.HTML
        )
        return

    user = update.message.reply_to_message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_id = user.id
    username = f"@{user.username}" if user.username else "No username"

    photos = await context.bot.get_user_profile_photos(user.id)
    if photos.total_count > 0:
        photo_file = photos.photos[0][-1].file_id
        await update.message.reply_photo(
            photo=photo_file,
            caption=(
                f"<b>ЁЯСд Full Name:</b> <b>{full_name}</b>\n"
                f"<b>ЁЯЖФ User ID:</b> <code>{user_id}</code>\n"
                f"<b>ЁЯФЧ Username:</b> <b>{username}</b>"
            ),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            f"<b>ЁЯСд Full Name:</b> <b>{full_name}</b>\n"
            f"<b>ЁЯЖФ User ID:</b> <code>{user_id}</code>\n"
            f"<b>ЁЯФЧ Username:</b> <b>{username}</b>",
            parse_mode=ParseMode.HTML
        )

# /report ржХржорж╛ржирзНржб
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "<b>тЭМ рж░рж┐ржкрзЛрж░рзНржЯ рж▓рж┐ржЦрзЛ! ржпрзЗржоржиржГ\n/report ржХрзЗржЙ ржмрж╛ржЬрзЗ ржХржерж╛ ржмрж▓ржЫрзЗ</b>",
            parse_mode=ParseMode.HTML
        )
        return

    report_text = ' '.join(context.args)
    safe_report_text = html.escape(report_text)  # ржирж┐рж░рж╛ржкржжрзЗ ржПрж╕рзНржХрзЗржк ржХрж░рж▓рж╛ржо

    user = update.effective_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    username = f"@{user.username}" if user.username else "No username"
    user_id = user.id

    msg = (
        f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\n"
        f"ЁЯСд Reporter Info:\n"
        f"тАв Name: {full_name}\n"
        f"тАв Username: {username}\n"
        f"тАв Chat ID: <code>{user_id}</code>\n\n"
        f"ЁЯУЭ рж░рж┐ржкрзЛрж░рзНржЯ: {safe_report_text}"
    )

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=msg, parse_mode=ParseMode.HTML)
        except Exception as e:
            print(f"тЭМ ржЕрзНржпрж╛ржбржорж┐ржи {admin_id} ржХрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

    await update.message.reply_text(
        "<b>тЬЕ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред</b>",
        parse_mode=ParseMode.HTML
    )

# /rules ржХржорж╛ржирзНржб
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text(
            "<b>тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛрж░ ржмрж╛ржкрзЗрж░ ?ЁЯЩВЁЯШСЁЯШРЁЯди рж╣рзБржжрж╛ржЗ ржХржорж╛ржирзНржб ржЯрзЗржкрзЗ ЁЯШСЁЯЩД</b>",
            parse_mode=ParseMode.HTML
        )
        return

    rules_text = (
        "<b>ЁЯУв ржЧрзНрж░рзБржкрзЗрж░ ржирж┐рзЯржорж╛ржмрж▓рзА:</b>\n\n"
        "1я╕ПтГг<b> ржЕрж╕ржнрзНржп ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред</b>тЭМ\n"
        "2я╕ПтГг<b> ржмрзНржпржХрзНрждрж┐ржЧржд ржЖржХрзНрж░ржоржг ржирж┐рж╖рж┐ржжрзНржзред</b>тЭМ\n"
        "3я╕ПтГг<b> рж╕рзНржкрзНржпрж╛ржо ржмрж╛ ржЕржмрж╛ржЮрзНржЫрж┐ржд рж▓рж┐ржЩрзНржХ ржжрзЗржУрзЯрж╛ ржпрж╛ржмрзЗ ржирж╛</b>тЭМ\n"
        "4я╕ПтГг<b> рж╕ржХрж▓ рж╕ржжрж╕рзНржпржХрзЗ рж╕ржорзНржорж╛ржи ржХрж░рждрзЗ рж╣ржмрзЗред</b>тЬЕ\n"
        "5я╕ПтГг<b> ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ ржорзЗржирзЗ ржЪрж▓рждрзЗ рж╣ржмрзЗред</b>тЬЕ\n\n"
        "<b>ржзржирзНржпржмрж╛ржж рж╕ржмрж╛ржЗржХрзЗ рж╢рж╛ржирзНрждрж┐ржкрзВрж░рзНржг ржУ ржоржЬрж╛рж░ ржЧрзНрж░рзБржк ржкрж░рж┐ржмрзЗрж╢ ржмржЬрж╛рзЯ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред</b>ЁЯл╢ЁЯТР"
    )
    await update.message.reply_text(rules_text, parse_mode=ParseMode.HTML)

# /help ржХржорж╛ржирзНржб
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>@TEAM_BCCBOT ржП BOT ржЧрж┐рзЯрзЗ ржпрзЗржХрж╛рж░рзЛ ржмрж┐рж╖рзЯрзЗ ржЧрзЛржкржирзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред</b>\n\n"
        "<b>ржпрзЗржнрж╛ржмрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░ржмрзЗржи:</b>\n"
        "\n"
        "<b>ржЙржжрж╛рж╣рж░ржгржГ</b>  /report &lt;ржЖржкржирж╛рж░ ржЙржХрзНржд ржЕржнрж┐ржпрзЛржЧржЯрж┐ рж▓рж┐ржЦрзБржи&gt; \n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржПрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        name = member.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"<b>ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {name}! ржЧрзНрж░рзБржкрзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржоржЬрж╛ ржХрж░рзЛ, ржирж┐рзЯржо ржорж╛ржирзЛ ЁЯШКЁЯТР</b>",
            parse_mode=ParseMode.HTML
        )

# ржорзЗржорзНржмрж╛рж░ ржмрзЗрж░ рж╣рж▓рзЗ ржмрж┐ржжрж╛рзЯ
async def left(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.left_chat_member
    if user:
        name = user.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"<b>ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ {name}! ржЖрж╢рж╛ ржХрж░рж┐ ржЖржмрж╛рж░ ржжрзЗржЦрж╛ рж╣ржмрзЗ!ЁЯл╢</b>",
            parse_mode=ParseMode.HTML
        )

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>ЁЯдЦ BCC GROUP BOT - ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ:</b>\n\n"
        "<b>ЁЯСС Admin Only Commands:</b>\n\n"
        "ЁЯФО /info - ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржиржлрзЛ \n"
        "ЁЯУЬ /rules - ржЧрзНрж░рзБржк ржирж┐рзЯржорж╛ржмрж▓рзА\n\n"
        
        "<b>ЁЯСе Member Commands:</b>\n\n"
        "ЁЯЖШ /help - рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛рж░ ржирж┐рзЯржо \n"
        "ЁЯЪи /report &lt;ржЕржнрж┐ржпрзЛржЧ&gt; - ржХрж╛рж░рзЛ ржмрж┐рж░рзБржжрзНржзрзЗ рж░рж┐ржкрзЛрж░рзНржЯ \n\n"
        "<b>ЁЯЫбя╕П ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржжрж┐ржи!</b>"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# /news ржХржорж╛ржирзНржб
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text(
            "<b>тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛрж░ ржмрж╛ржкрзЗрж░ ?ЁЯЩВЁЯШСЁЯШРЁЯди рж╣рзБржжрж╛ржЗ ржХржорж╛ржирзНржб ржЯрзЗржкрзЗ ЁЯШСЁЯЩД</b>",
            parse_mode=ParseMode.HTML
        )
        return

    if not context.args or not context.args[0].startswith("@"):
        await update.message.reply_text(
            "<b>тЪая╕П ржПржХржЯрж┐ username ржжрж┐ржи! ржпрзЗржоржиржГ /news @someone</b>",
            parse_mode=ParseMode.HTML
        )
        return

    target_username = context.args[0]

    roasts = [
        f"{target_username} ржПржд ржЫрзНржпрж╛ржХрж╛ ржЦрж╛ржЗржЫрзЗ ржпрзЗ ржПржЦржи ржЪрзЛржЦрзЗрж░ ржЬрж▓ ржжрж┐рзЯрзЗ ржЪрж╛ ржмрж╛ржирж╛рзЯред ЁЯШнтШХ",
        f"{target_username} ржПрж░ ржПржХрзНрж╕ ржПржЦржи ржЕржирзНржп ржХрж╛рж░рзЛ 'ржмрзЗржмрж┐' рж╣рзЯрзЗ ржЧрзЗржЫрзЗред ЁЯН╝",
        f"{target_username} crush ржХрзЗ I love you ржмрж▓рзЗржЫрж┐рж▓рзЛ, crush ржмрж▓рж▓ тАУ ржнрж╛ржЗ ржХрж┐ ржмрж▓рж▓рзЗржи! ЁЯШЕ",
        f"{target_username} ржПрж░ ржкрзНрж░рзЗржорзЗ ржкрзЬрж▓рзЗржЗ ржирж╛ржХрж┐ break-up ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐! ЁЯУЙЁЯТФ",
        f"{target_username} ржПрждржмрж╛рж░ ржЫрзНржпрж╛ржХрж╛ ржЦрж╛ржЗржЫрзЗ ржпрзЗ ржПржЦржи рждрж╛рж░ ржирж╛ржо ржЫрзНржпрж╛ржХрж╛ рж╕рзЗржиред ЁЯШ╡тАНЁЯТл",
        f"{target_username} ржПрж░ ржмрж┐рзЯрзЗ рж╣ржмрзЗ тАУ рж╢рзБржзрзБ рждрж╛рж░ рж╕рзНржмржкрзНржирзЗред ЁЯШк",
        f"{target_username} ржПржЦржирзЛ ржПржХрзНрж╕-ржПрж░ old chat ржкрзЬрзЗ рж░рж╛рждрзЗ ржХрж╛ржирзНржирж╛ ржХрж░рзЗред ЁЯШУЁЯУ▒",
        f"{target_username} ржкрзНрж░рзЗржо рж╢рзБрж░рзБ ржХрж░рж▓рзЗржЗ universe ржмрж▓рзЗ тАУ ржЖржмрж╛рж░ рж╢рзБрж░рзБ! ЁЯШС",
        f"{target_username} ржПржХрзНрж╕ ржЫрзЗржбрж╝рзЗ ржЧрзЗржЫрзЗ, ржПржЦржи only memories ржЖржЫрзЗ ржЖрж░ Netflixред ЁЯОЮя╕ПЁЯН┐",
        f"{target_username} ржПрж░ crush ржУржХрзЗ ржжрзЗржЦрж▓рзЗ ржирж┐ржЬрзЗрж░ ржЪрзЛржЦ ржмржирзНржз ржХрж░рзЗ! ЁЯЩИ",
        f"{target_username} ржПрж░ ржмрж┐рзЯрзЗ рж╣ржмрзЗ ржПржоржи ржЧрзБржЬржм ржирж┐рзЯрзЗ whole ржЧрзНрж░рж╛ржо рж╣рж╛рж╕рзЗред ЁЯдг",
        f"{target_username} ржирж┐ржЬрзЗрж░ ржмрж┐рзЯрзЗрждрзЗ guest рж╣ржмрзЗ ржирж╛, ржХрж╛рж░ржг ржХрзЗржЙ ржирж╛ржЗ! ЁЯд╖тАНтЩВя╕П",
        f"{target_username} ржПржд ржХрж╖рзНржЯрзЗ ржЖржЫрзЗ, sad song ржЖрж░ рждрж╛рж░ ржмржирзНржзрзБ рж╣рзЯрзЗ ржЧрзЗржЫрзЗред ЁЯО╢ЁЯШн",
        f"{target_username} ржкрзНрж░ржкрзЛржЬ ржХрж░рзЗржЫрж┐рж▓рзЛ, рж░рж┐ржЬрзЗржХрзНржЯрзЗржб рж╣рзЯрзЗ ржПржЦржи ржХржмрж┐ рж╣рзЯрзЗ ржЧрзЗржЫрзЗред ЁЯЦКя╕П",
        f"{target_username} ржПржд lonely ржпрзЗ mirror ржПрж░ рж╕рж╛ржерзЗржЗ ржХржерж╛ ржмрж▓рзЗред ЁЯкЮЁЯШв",
        f"{target_username} ex-ржПрж░ profile ржкрж┐ржХ ржжрзЗржЦрзЗ рж╢рзБржзрзБ sigh ржХрж░рзЗред ЁЯШотАНЁЯТи",
        f"{target_username} crush-ржПрж░ рж╕рзНржЯрзЛрж░рж┐ ржжрзЗржЦрзЗржЗ ржжрж┐ржи рж╢рзБрж░рзБ ржХрж░рзЗ, ржЖрж░ рж░рж╛рждрзЗ рж╣рж╛рж╣рж╛ржХрж╛рж░! ЁЯМТ",
        f"{target_username} ржПрж░ love story рж╢рзБрж░рзБ рж╣рждрзЗржЗ breakup рж╣рзЯрзЗ ржпрж╛рзЯред ЁЯЪлтЭдя╕П",
        f"{target_username} ржПрж░ ржПржд ржПржХрзНрж╕ ржЫрж┐рж▓рзЛ ржпрзЗ ржлрзЛржирзЗрж░ storage рж╢рзЗрж╖ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ! ЁЯШВ",
        f"{target_username} ржПрж░ ржПржХрзНрж╕ ржПржЦржи рждрж╛рж░ ржмрзЛржирзЗрж░ ржмрж╛ржирзНржзржмрзАрж░ ржмрж╛ржирзНржзржмрзАрж░ ржмрзЯржлрзНрж░рзЗржирзНржбред ЁЯе┤",
        f"{target_username} рж╕ржмрж╕ржорзЯ ржмрж▓рждрзЛ тАУ 'рждрзБржорж┐ ржЫрж╛рзЬрж╛ ржмрж╛ржБржЪржмрзЛ ржирж╛'... ржПржЦржирзЛ ржмрзЗржБржЪрзЗ ржЖржЫрзЗред ЁЯдР",
        f"{target_username} ржПржд ржЫрзНржпрж╛ржХрж╛ ржЦрж╛рзЯ ржпрзЗ рждрж╛рж░ рж╣рзГржжрзЯ ржПржЦржи ржнрж╛ржЗрж░рж╛рж╕рзЗ ржнрж░рж╛ред ЁЯТФЁЯжа",
        f"{target_username} crush-ржПрж░ reply ржкрж╛рзЯ ржирж╛, ржПржЦржи status ржжрзЗрзЯ тАУ 'Stay Single, Stay Strong' ЁЯТк",
        f"{target_username} ex ржХрзЗ ржирж┐рзЯрзЗ poetry рж▓рзЗржЦрзЗ, ржЕржержЪ ржХрзЗржЙ ржкрзЬрзЗ ржирж╛! ЁЯУЦЁЯШЖ",
        f"{target_username} ржПрж░ ржмрж┐рзЯрзЗрж░ ржЦрзЛржБржЬ ржкрждрзНрж░рж┐ржХрж╛ ржЫрж╛рзЬрж╛ ржЖрж░ ржХрзЛржерж╛ржУ ржирзЗржЗред ЁЯУ░",
        f"{target_username} ржмрж┐рзЯрзЗ ржХрж░рждрзЗ ржЪрж╛рзЯ, ржХрж┐ржирзНрждрзБ ржХржирзЗ ржмрж▓рзЗ тАУ ржЖржорж┐ ржнржЧржмрж╛ржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрж┐ред ЁЯЩП",
        f"{target_username} ржХрзЗ ржмрж┐рзЯрзЗ ржХрж░рж▓рзЗ ржмрзБржЭржмрзЗ тАУ ржЬрзАржмржи ржорж╛ржирзЗ ржпржирзНрждрзНрж░ржгрж╛ред ЁЯШИ",
        f"{target_username} ржПрж░ ржкрзНрж░рзЗржорзЗ fall ржХрж░рзЗржЫрж┐рж▓рзЛ gravity, рждрж╛ржЗ ржПржд heavy breakup! ЁЯНВ",
        f"{target_username} crush ржХрзЗ ржжрзЗржЦрж▓рзЗржЗ ржжрзЛржпрж╝рж╛ ржкрзЬрзЗ тАУ 'рж╣рзЗ ржЖрж▓рзНрж▓рж╛рж╣, ржоржиржХрзЗ рж╢ржХрзНржд ржХрж░рзЛ!' ЁЯд▓",
        f"{target_username} ржПрж░ ржПржХрзНрж╕ ржПржЦржи motivational speaker тАУ 'Breakup ржП ржЬрзАржмржи ржерзЗржорзЗ ржерж╛ржХрзЗ ржирж╛' ЁЯШМ",
    ]

    roast_message = random.choice(roasts)

    try:
        await update.message.delete()
    except Exception as e:
        print(f"тЭМ ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐: {e}")

    await update.message.chat.send_message(roast_message, parse_mode=ParseMode.HTML)

# ржмржЯ ржЪрж╛рж▓рзБ
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, left))
    app.add_handler(CommandHandler("start", start))

    print("тЬЕ Bot is running with multi-admin /report, /info, /rules, /help, and /news support")
    app.run_polling()
