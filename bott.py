import subprocess
import sys

def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", package])

try:
    import telegram
    import telegram.ext
except ImportError:
    print("ЁЯУж python-telegram-bot рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐, ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    install_package("python-telegram-bot")

import re
from telegram import Update, ChatMember, ChatMemberUpdated
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler, MessageHandler

BOT_TOKEN = "7375483284:AAETWnzTxMzrAoPLUySLzcy0EcMim1l4VI0"
ADMIN_ID = 7949308405  # рж╢рзБржзрзБ ржПржЗ ржЖржЗржбрж┐рж░ ржЗржЙржЬрж╛рж░ /info ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ, /report ржкрж╛ржмрж▓рж┐ржХ

def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

async def is_admin(update: Update):
    return update.effective_user.id == ADMIN_ID

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("тЫФ ржмрж╛ржкржЬрж╛ржи BOT ржХрж┐ рждрзЛржорж╛рж░ ржмрж╛ржкрзЗрж░ ЁЯЩВ ? ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ!")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("тЪая╕П ржХрж╛рж░рзЛ ржорзЗрж╕рзЗржЬрзЗ reply ржжрж┐рзЯрзЗ `/info` рж▓рж┐ржЦрзЛред")
        return 

    user = update.message.reply_to_message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_id = user.id
    username = f"@{escape_markdown(user.username)}" if user.username else "No username"

    photos = await context.bot.get_user_profile_photos(user.id)
    if photos.total_count > 0:
        photo_file = photos.photos[0][-1].file_id
        await update.message.reply_photo(
            photo=photo_file,
            caption=(
                f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
                f"ЁЯЖФ *User ID:* `{user_id}`\n"
                f"ЁЯФЧ *Username:* {username}"
            ),
            parse_mode="MarkdownV2"
        )
    else:
        await update.message.reply_text(
            f"ЁЯСд *Full Name:* {escape_markdown(full_name)}\n"
            f"ЁЯЖФ *User ID:* `{user_id}`\n"
            f"ЁЯФЧ *Username:* {username}",
            parse_mode="MarkdownV2"
        )

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "тЭМ рж░рж┐ржкрзЛрж░рзНржЯрзЗрж░ ржЯрзЗржХрзНрж╕ржЯ рж▓рж┐ржЦрзЛ, ржпрзЗржоржи:\nржЙржжрж╛рж╣рж░ржиржГ /report <your report text here>"
        )
        return

    report_text = ' '.join(context.args)
    user = update.effective_user
    msg = (
        f"ЁЯУй ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ ржПрж╕рзЗржЫрзЗ:\n\n"
        f"ЁЯСд Reporter: {user.mention_html()}\n"
        f"ЁЯУЭ рж░рж┐ржкрзЛрж░рзНржЯ: {report_text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="HTML")
    await update.message.reply_text("тЬЕ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржжред")

# --- ржирждрзБржи ржЕржВрж╢ рж╢рзБрж░рзБ ---

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржпрзЛржЧ ржжрж┐рж▓рзЗ рж╕рзНржмрж╛ржЧрждржо ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржмрзЗ
    for member in update.message.new_chat_members:
        name = member.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {name}! ржЧрзНрж░рзБржкрзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржПржЦрж╛ржирзЗ рж╕ржмрж╛ржЗ ржмржирзНржзрзБ, ржоржЬрж╛ ржХрж░рзЛ ржЧрзНрж░рзБржк рж░рзБрж▓рж╕ ржорзЗржирзЗ ржЪрзЛрж▓рзЛ! ЁЯШК"
        )

async def left(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ржХрзЗржЙ ржЧрзНрж░рзБржк ржЫрзЗржбрж╝рзЗ ржЧрзЗрж▓рзЗ ржмрж┐ржжрж╛ржпрж╝ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржмрзЗ
    user = update.message.left_chat_member
    if user:
        name = user.first_name or "ржмржирзНржзрзБ"
        await update.message.reply_text(
            f"ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ {name}! ржЖрж╢рж╛ ржХрж░рж┐ ржЖржмрж╛рж░ ржЖрж╕ржмрзЗред"
        )

# Alternatively, using ChatMemberHandler for member updates:
# async def member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     result = update.chat_member
#     status = result.new_chat_member.status
#     user = result.new_chat_member.user
#     if status == ChatMember.MEMBER:
#         await update.effective_chat.send_message(f"ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо {user.first_name}!")
#     elif status == ChatMember.LEFT:
#         await update.effective_chat.send_message(f"ЁЯСЛ ржмрж┐ржжрж╛ржпрж╝ {user.first_name}!")

# --- ржирждрзБржи ржЕржВрж╢ рж╢рзЗрж╖ ---


if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("report", report))

    # ржирждрзБржи ржорзЗржорзНржмрж╛рж░ ржЖрж╕рж▓рзЗ welcome, ржорзЗржорзНржмрж╛рж░ ржЧрзЗрж▓рзЗ left рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(MessageHandler(filters=telegram.ext.filters.StatusUpdate.NEW_CHAT_MEMBERS, callback=welcome))
    app.add_handler(MessageHandler(filters=telegram.ext.filters.StatusUpdate.LEFT_CHAT_MEMBER, callback=left))

    print("тЬЕ Bot is running... /info (admin only), /report, Welcome and Left message active")
    app.run_polling()
